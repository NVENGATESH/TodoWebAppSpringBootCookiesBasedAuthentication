spring.application.name=ToDoListWebApp

# spring.datasource.url=jdbc:postgresql://localhost:5432/TodoAppDb
# spring.datasource.username=postgres
# spring.datasource.password=1017
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# ============ LOGGING (Optional) ============

logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE





spring.app.jwtSecret=mySecretKey123912738aopsgjnspkmndfsopkvajoirjg94gf2opfng2moknm
spring.app.jwtExpirationMs=3000000
spring.app.jwtCookieName=springBootEcom





logging.level.org.springframework=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.ecommerce.project=DEBUG




server.port=${PORT:8080}
# Database
spring.datasource.url=jdbc:postgresql://dpg-d24cr99r0fns73b39hjg-a.oregon-postgres.render.com:5432/todospringweb
spring.datasource.username=todospringweb_user
spring.datasource.password=LpPL31Kny0kwoHcO1p61mNqzQjaNlT9T
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.ssl=true
spring.datasource.hikari.ssl-mode=require





spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Connection pool
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=5









#
#
#//    @Bean
#//    public CommandLineRunner initData(RoleRepository roleRepository, UserRepository userRepository, PasswordEncoder passwordEncoder) {
#//        return args -> {
#//            // Retrieve or create roles
#//            Role userRole = roleRepository.findByRoleName(AppRole.ROLE_USER)
#//                    .orElseGet(() -> {
#//                        Role newUserRole = new Role(AppRole.ROLE_USER);
#//                        return roleRepository.save(newUserRole);
#//                    });
#//
#//            Role sellerRole = roleRepository.findByRoleName(AppRole.ROLE_SELLER)
#//                    .orElseGet(() -> {
#//                        Role newSellerRole = new Role(AppRole.ROLE_SELLER);
#//                        return roleRepository.save(newSellerRole);
#//                    });
#//
#//            Role adminRole = roleRepository.findByRoleName(AppRole.ROLE_ADMIN)
#//                    .orElseGet(() -> {
#//                        Role newAdminRole = new Role(AppRole.ROLE_ADMIN);
#//                        return roleRepository.save(newAdminRole);
#//                    });
#//
#//            Set<Role> userRoles = Set.of(userRole);
#//            Set<Role> sellerRoles = Set.of(sellerRole);
#//            Set<Role> adminRoles = Set.of(userRole, sellerRole, adminRole);
#//
#//
#//            // Create users if not already present
#//            if (!userRepository.existsByUserName("user1")) {
#//                User user1 = new User("user1", "user1@example.com", passwordEncoder.encode("password1"));
#//                userRepository.save(user1);
#//            }
#//
#//            if (!userRepository.existsByUserName("seller1")) {
#//                User seller1 = new User("seller1", "seller1@example.com", passwordEncoder.encode("password2"));
#//                userRepository.save(seller1);
#//            }
#//
#//            if (!userRepository.existsByUserName("admin")) {
#//                User admin = new User("admin", "admin@example.com", passwordEncoder.encode("adminPass"));
#//                userRepository.save(admin);
#//            }
#//
#//            // Update roles for existing users
#//            userRepository.findByUserName("user1").ifPresent(user -> {
#//                user.setRoles(userRoles);
#//                userRepository.save(user);
#//            });
#//
#//            userRepository.findByUserName("seller1").ifPresent(seller -> {
#//                seller.setRoles(sellerRoles);
#//                userRepository.save(seller);
#//            });
#//
#//            userRepository.findByUserName("admin").ifPresent(admin -> {
#//                admin.setRoles(adminRoles);
#//                userRepository.save(admin);
#//            });
#//        };
#//    }